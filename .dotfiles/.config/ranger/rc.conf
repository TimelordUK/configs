# ===================================================================
# This file contains the default startup commands for ranger.
# To change them, it is recommended to create either /etc/ranger/rc.conf
# (system-wide) or ~/.config/ranger/rc.conf (per user) and add your custom
# commands there.
#
# If you copy this whole file there, you may want to set the environment
# variable RANGER_LOAD_DEFAULT_RC to FALSE to avoid loading it twice.
#
# The purpose of this file is mainly to define keybindings and settings.
# For running more complex python code, please create a plugin in "plugins/" or
# a command in "commands.py".
#
# Each line is a command that will be run before the user interface
# is initialized.  As a result, you can not use commands which rely
# on the UI such as :delete or :mark.
# ===================================================================

# ===================================================================
# == Options
# ===================================================================

# see http://dquinton.github.io/debian-install/config/ranger.html
# https://github.com/alexanderjeurissen/ranger_devicons
# https://github.com/alfunx/ranger-colorschemes

map <a-m>f linemode filename
map <a-m>i linemode fileinfo
map <a-m>p linemode permissions
map <a-m>t linemode metatitle
map <a-m>m linemode mtime
map <a-m>s linemode sizemtime

##### Meta data ##########

map f<a-m> console -p11 meta title%space  %%s       #add meta title to sel'd files
map <a-f> linemode filename               #linemode: filename (normal)
map <a-t> linemode metatitle              #linemode: titles

default_linemode sizemtime

map /   console search%space
map \]  console find%space
map \[  console travel%space
map \\  console mark%space
map |   console filter%space

# edit rc.conf and source
map xx2 chain shell nvim ~/.config/ranger/rc.conf; source ~/.config/ranger/rc.conf


# -a	automatically open a file on unambiguous match
# -e	open file on hitting Enter
# -f	reduces file list to scout hits, (same as filter command does)
# -g	interpret pattern as a glob pattern
# -i	ignore case
# -k	keep the console open when changing a directory with the command
# -l	letter skipping; e.g. allow "rdme" to match the file "readme"
# -m	mark the matching files on hitting Enter
# -M	unmark the matching files on hitting enter
# -p	permanent filter on hitting Enter (unmatched files stay hidden)
# -s	smart case: lower case hits all, uppercase hits only uppercase
# -t	searches as you type
# -v	inverts the match
# 

# ready-made Ranger aliases for the `scout` command

alias filter	scout -iprt
alias find	scout -aet
alias mark	scout -mr
alias unmark	scout -Mr
alias search	scout -rts
alias travel	scout -aefikst

map fe  edit
#note also my ,df displays file and dir count
map du  shell -p du -ch -d 1 | sort -rh       
map dz  shell -p du -ch -d 1 | sort -k 2b

#change i to edit file name at first char, set Alt-i to open file in pager instead of i
map <a-i> display_file
map i  eval fm.open_console('rename ' + fm.thisfile.basename, position=7)
# filter ^(?!node_)
map fif  eval fm.open_console('filter ^(?!' + fm.thisfile.basename + ')', position=11)

map uu   uncut
map <C-n>  tab_new %d

copymap gn <a-t> 
copymap ct <a-c> 

map <F5> reset      
#refresh screen - easier than ctrl-r
map <DELETE> shell -s trash-put %s    
#(need trash-cli -see below)

################## My keyinds ######################

map Vm set viewmode miller
map Vt set viewmode multipane

map <a-PAGEDOWN> move down=0.5   pages=True
map <a-PAGEUP>   move up=0.5   pages=True
   
# move up/down parent dir by 5 or 20, this is v useful for navigation
# note [] will move parent up and down 1
map {	  move_parent n=-5
map }	  move_parent n=5
map <F9>  move_parent n=-10
map <F10> move_parent n=10          #doesn't work if less than 10 dir's of same parent

copymap ct <a-c>  #search next tag

map <F12> flat             #ie {n}F12 show files of sub-dir's, n levels deep, all in main column - be careful it can be expensive to show them all!
map <F2> toggle_option show_hidden
copymap S <a-s>                   #open Shell with Alt-s

map mk console mark%space

##### files ##########

map fl   shell -f bat %s                #view file with less. q to quit (ranger i doesn't show full file)
map fm   console mkdir%space             # create dir
map ft   console touch%space             # create file
map f+   shell -s chmod +x %s                     #make a file executable
map f- shell -s chmod -x %s
map f=   console shell -s chmod 664 %%s                #chmod operations - or type 664=
map fr   console rename%space
map fb   bulkrename %s
map fC console -p16 shell cat %%s > 1              #concatenate text files
map fpy   shell -f pyrenamer %d                            #GUI renamer, or another, `Thunar -B %d'
map fg   console -p22 shell -p grep -nT -r ?* %%s            #grep (search) pattern in files or highl'd dir
map f?   console -p22 shell perl -pi -e 's/?/@/g' %%s                  #replace string in files
map fc   shell -f meld %s 	                                           #compare two files in meld
map fpdf console -p88 shell -ft gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -dPDFSETTINGS=/prepress-sOutputFile=?.pdf %%s
                                                      #join selected pdf files together using ghost script -change ?
map ft console filter%space
map ff   console -p25 shell -p find . -name "*?*" -type f -print            #find files and print paths to pager
map f\   shell -f catfish --path=%d                                        #find files with catfish
map fx   shell -f regexxer %d                                            #run string replace tool
map f1   console -p49 shell -s for file in %%s ;do cp "$file" "$file"_1 ;done           #duplicate selected files adding _1
map f2   console shell -s sh ~/.config/ranger/scripts/duplicate %%s               #duplicate selected files infix _1
map f3   console shell -s ~/.config/ranger/scripts/rename-with-selected %f %s          #rename highlighted file with selected file's name
map fW1  console shell > %f												#wipe a file with 0 bytes
map fW2  console shell -f for file in %%s; do > "$file" ;done

##### yanking ##########

map y2   shell -s cp %s "`yad --title="Copy To" --file --directory --height=400 --width=500`"
map d2   shell -s mv %s "`yad --title="Move To" --file --directory --height=400 --width=500`"
map ys   chain save_copy_buffer; shell less ~/.config/ranger/copy_buffer                    #saves copy buffer to file and then shows the file in pager
map yb   chain save_copy_buffer; shell less ~/.config/ranger/copy_buffer | xclip -sel clip     #copy buffer to clipbd

map yp   shell echo -n %d/%f | xclip -sel clip   #copy filename and path
map yn   shell echo -n %s | xclip -sel clip      #copy filenames
map yd   shell echo -n %d | xclip -sel clip      #copy directory name

map pc   shell -f rsync -ru %s %d/%f/                        #copy the selected files into highlighted dir
map pm   shell -f mv -u %s %d/%f                            #move the selected files into highlighted dir
map pds  shell -f rsync -rul %c %d/%f/                         #copy buff'd into dir
map pdm  shell -f mv -u %c %d/%f                              #move buff'd into dir
map ps   shell -f rsync -rul %c %d                        #sync buffer'd files into curr dir  :links as links
map pr   shell -f rsync -ruL %c %d                      #sync buffer'd files into curr dir  :inc link-referred files
map ytt  shell -f rsync -rul %s %D                      #sync sel'd into dir on next tab  :links as links
map yff  shell -f rsync -rul %S %d                    #sync sel'd from dir on next tab  :links as links
map ytr  shell -f rsync -ruL %s %D                  #sync sel'd into dir on next tab  :inc link-referred files
map yfr  shell -f rsync -ruL %S %d                 #sync sel'd from dir on next tab  :inc link-referred files
map dtt  shell -f mv %s %D                            #move sel'd into dir on next tab
map dff  shell -f mv %S %d                             #move sel'd from dir on next tab
map p\x  shell mkdir moved; mv -t moved `xsel -b -o`           #remove files via list on clipbd (collected with yn)
map p\c  shell mkdir copied; cp -t copied `xsel -b -o`         #copy files via list (yn)

####### Edit config files ##########

map .1  shell nvim ~/.zsh/.zshrc
map .2  shell nvim ~/.tmux.conf
map .3  shell nvim ~/.config/nushell/config.nu

##### delete ##########

map <DELETE> shell -s trash-put %s            #integrated trash (recycler) - see below how to set up.
map <a-DELETE> shell -cs trash-put %f		#delete the current file only - not all the selected ones!! 
map <S-DELETE>  console delete
map X    console delete	         #hit enter before deleting
map xX shell rm -f %f  			#delete highlighted file not the selected files!
map xx1  cd ~/.local/share/Trash/files

# Which viewmode should be used?  Possible values are:
#     miller: Use miller columns which show multiple levels of the hierarchy
#     multipane: Midnight-commander like multipane view showing all tabs next
#                to each other
set viewmode miller
#set viewmode multipane

# How many columns are there, and what are their relative widths?
set column_ratios 1,3,4

# Which files should be hidden? (regular expression)
set hidden_filter ^\.|\.(?:pyc|pyo|bak|swp)$|^lost\+found$|^__(py)?cache__$

# Show hidden files? You can toggle this by typing 'zh'
set show_hidden false

# Ask for a confirmation when running the "delete" command?
# Valid values are "always", "never", "multiple" (default)
# With "multiple", ranger will ask only if you delete multiple files at once.
set confirm_on_delete multiple

# Use non-default path for file preview script?
# ranger ships with scope.sh, a script that calls external programs (see
# README.md for dependencies) to preview images, archives, etc.

set preview_script ~/.config/ranger/scope.sh
set preview_images true

# Use the external preview script or display simple plain text or image previews?
set use_preview_script true

# Automatically count files in the directory, even before entering them?
set automatically_count_files true

# Open all images in this directory when running certain image viewers
# like feh or sxiv?  You can still open selected files by marking them.
set open_all_images false

# Be aware of version control systems and display information.
set vcs_aware true

# State of the four backends git, hg, bzr, svn. The possible states are
# disabled, local (only show local info), enabled (show local and remote
# information).
set vcs_backend_git enabled
set vcs_backend_hg disabled
set vcs_backend_bzr disabled
set vcs_backend_svn disabled

# Truncate the long commit messages to this length when shown in the statusbar.
set vcs_msg_length 50

# Use a unicode "..." character to mark cut-off filenames?
set unicode_ellipsis false

# Show dotfiles in the bookmark preview box?
set show_hidden_bookmarks true

# Which colorscheme to use?  These colorschemes are available by default:
# default, jungle, snow, solarized
set colorscheme default

# Preview files on the rightmost column?
# And collapse (shrink) the last column if there is nothing to preview?
set preview_files true
set preview_directories true
set collapse_preview true

# Wrap long lines in plain text previews?
set wrap_plaintext_previews false

# Save the console history on exit?
set save_console_history true

# Draw the status bar on top of the browser window (default: bottom)
set status_bar_on_top false

# Draw a progress bar in the status bar which displays the average state of all
# currently running tasks which support progress bars?
set draw_progress_bar_in_status_bar true

# Draw borders around columns? (separators, outline, both, or none)
# Separators are vertical lines between columns.
# Outline draws a box around all the columns.
# Both combines the two.
set draw_borders none

# Display the directory name in tabs?
set dirname_in_tabs false

# Enable the mouse support?
set mouse_enabled true

# Display the file size in the main column or status bar?
set display_size_in_main_column true
set display_size_in_status_bar true

# Display the free disk space in the status bar?
set display_free_space_in_status_bar true

# Display files tags in all columns or only in main column?
set display_tags_in_all_columns true

# Set a title for the window? Updates both `WM_NAME` and `WM_ICON_NAME`
set update_title false

# Set the tmux/screen window-name to "ranger"?
set update_tmux_title true

# Shorten the title if it gets long?  The number defines how many
# directories are displayed at once, 0 turns off this feature.
set shorten_title 3

# Show hostname in titlebar?
set hostname_in_titlebar true

# Abbreviate $HOME with ~ in the titlebar (first line) of ranger?
set tilde_in_titlebar false

# How many directory-changes or console-commands should be kept in history?
set max_history_size 20
set max_console_history_size 50

# Try to keep so much space between the top/bottom border when scrolling:
set scroll_offset 8

# Flush the input after each key hit?  (Noticeable when ranger lags)
set flushinput true

# Padding on the right when there's no preview?
# This allows you to click into the space to run the file.
set padding_right true

# Save bookmarks (used with mX and `X) instantly?
# This helps to synchronize bookmarks between multiple ranger
# instances but leads to *slight* performance loss.
# When false, bookmarks are saved when ranger is exited.
set autosave_bookmarks true

# Save the "`" bookmark to disk.  This can be used to switch to the last
# directory by typing "``".
set save_backtick_bookmark true

# You can display the "real" cumulative size of directories by using the
# command :get_cumulative_size or typing "dc".  The size is expensive to
# calculate and will not be updated automatically.  You can choose
# to update it automatically though by turning on this option:
set autoupdate_cumulative_size false

# Turning this on makes sense for screen readers:
set show_cursor false

# One of: size, natural, basename, atime, ctime, mtime, type, random
set sort natural

# Additional sorting options
set sort_reverse false
set sort_case_insensitive true
set sort_directories_first true
set sort_unicode false

# Whether to include bookmarks in cd command
set cd_bookmarks true

# Changes case sensitivity for the cd command tab completion
set cd_tab_case sensitive

# Use fuzzy tab completion with the "cd" command. For example,
# ":cd /u/lo/b<tab>" expands to ":cd /usr/local/bin".
set cd_tab_fuzzy false

# Avoid previewing files larger than this size, in bytes.  Use a value of 0 to
# disable this feature.
set preview_max_size 0

# The key hint lists up to this size have their sublists expanded.
# Otherwise the submaps are replaced with "...".
set hint_collapse_threshold 10

# Add the highlighted file to the path in the titlebar
set show_selection_in_titlebar true

# The delay that ranger idly waits for user input, in milliseconds, with a
# resolution of 100ms.  Lower delay reduces lag between directory updates but
# increases CPU load.
set idle_delay 2000

# When the metadata manager module looks for metadata, should it only look for
# a ".metadata.json" file in the current directory, or do a deep search and
# check all directories above the current one as well?
set metadata_deep_search false

# Clear all existing filters when leaving a directory
set clear_filters_on_dir_change false

# Disable displaying line numbers in main column.
# Possible values: false, absolute, relative.
set line_numbers relative

# When line_numbers=relative show the absolute line number in the
# current line.
set relative_current_zero false

# Start line numbers from 1 instead of 0
set one_indexed false

# Save tabs on exit
set save_tabs_on_exit false

# Enable scroll wrapping - moving down while on the last item will wrap around to
# the top and vice versa.
set wrap_scroll false

# Set the global_inode_type_filter to nothing.  Possible options: d, f and l for
# directories, files and symlinks respectively.
set global_inode_type_filter

# This setting allows to freeze the list of files to save I/O bandwidth.  It
# should be 'false' during start-up, but you can toggle it by pressing F.
set freeze_files false

# Print file sizes in bytes instead of the default human-readable format.
set size_in_bytes false

# Warn at startup if RANGER_LEVEL env var is greater than 0, in other words
# give a warning when you nest ranger in a subshell started by ranger.
# Special value "error" makes the warning more visible.
set nested_ranger_warning true

default_linemode devicons
